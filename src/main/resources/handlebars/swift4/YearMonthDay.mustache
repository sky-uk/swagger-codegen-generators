//
// YearMonthDay.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

public struct YearMonthDay {
    let year: Int
    let month: Int
    let day: Int
}

extension YearMonthDay: Codable, Equatable, Hashable {
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawDate = try container.decode(String.self)
        let formatter = ISO8601DateFormatter()
        formatter.formatOptions = .withFullDate
        guard let date = formatter.date(from: rawDate)
            else { throw DecodingError.dataCorruptedError(in: container,
                                                      debugDescription: "Cannot decode date string \(rawDate)") }

        let dateComponents = Calendar(identifier: .iso8601).dateComponents([.year, .month, .day], from: date)

        guard let year = dateComponents.year,
            let month = dateComponents.month,
            let day = dateComponents.day
            else { throw DecodingError.dataCorruptedError(in: container,
                                                          debugDescription: "Cannot decode date string \(rawDate)") }

        self.year = year
        self.month = month
        self.day = day
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        let rawDate = [year, month, day]
            .map{String($0)}
            .joined(separator: "-")

        let formatter = ISO8601DateFormatter()
        formatter.formatOptions = .withFullDate
        guard formatter.date(from: rawDate) != nil
            else { throw EncodingError.invalidValue(self, EncodingError.Context(codingPath: container.codingPath,
                                                                                debugDescription: "Cannot encode \(self)")) }
        try container.encode(rawDate)
    }
}